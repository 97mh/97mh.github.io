<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch选举机制</title>
      <link href="/2023/05/23/elasticsearch%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/05/23/elasticsearch%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch读写原理</title>
      <link href="/2023/05/23/elasticsearch%E8%AF%BB%E5%86%99%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/23/elasticsearch%E8%AF%BB%E5%86%99%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="Elasticsearch-官方说明"><a href="#Elasticsearch-官方说明" class="headerlink" title="Elasticsearch 官方说明"></a>Elasticsearch 官方说明</h4><blockquote><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 <a class="link"   href="https://lucene.apache.org/core/" >Apache Lucene™<i class="fas fa-external-link-alt"></i></a> 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库—​无论是开源还是私有。</p><p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene <em>非常</em> 复杂。</p><p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API。</p><p>然而，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p><ul><li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul></blockquote><h4 id="写入数据流程"><a href="#写入数据流程" class="headerlink" title="写入数据流程"></a>写入数据流程</h4><p>1、选择集群中的一个节点发送写入请求，接收到请求节点被称为协调节点 (coordinating node)</p><p>2、通过公式计算出处理写入请求的primary shard node</p><blockquote><p>公式：shard &#x3D; hash(routing) % number_of_primary_shards</p><p><code>routing</code> 是一个可变值，默认是文档的 <code>_id</code> ，也可以设置成一个自定义的值</p></blockquote><p>3、主分片节点 primary shard node 处理写入成功后，将请求并行转发到所有的副本分片节点 replica shard node。</p><blockquote><p>执行写操作之前，主分片会要求必须要有规定数量的分片副本处于活跃状态，才会允许执行写操作。 </p><p>    consistency 一致性：</p><p>        one，既只要主分片状态ok就允许执行写操作 （默认）</p><p>        quorum， 大多数分片副本状态没有问题才允许执行写操作 int( (primary + number_of_replicas) &#x2F; 2 ) + 1</p><p>        all，必须要所有的副本状态都没有问题才允许执行写操作 </p><p>    </p><p>    timeout：</p><p>        如果没有足够的副本分片，Elasticsearch会等待，希望有更多的分片出现。默认情况下，等待1分钟。</p></blockquote><p>4、当所有的 replica shard 写入成功了，primary shard node 返回协调节点成功</p><blockquote><p>如果某个replica shard执⾏失败，则primary shard会给master发请求remove该replica shard </p></blockquote><h5 id="写入阶段"><a href="#写入阶段" class="headerlink" title="写入阶段"></a>写入阶段</h5><p>此阶段写入数据分别在内存缓存区（memory buffer） 和 translog （事务日志）。此时文档搜索不到，也还没有构建倒排索引。</p><p>translog 用来保证数据可靠性，类似 MySQL 的 redolog 机制，以key value的形式进行存储，key &#x3D; document_id，value &#x3D; document。 默认是异步刷盘，每5秒进行一次刷盘。如果发生机房断电，会有5秒的数据丢失。如果希望数据不丢失，可配置为同步刷盘</p><blockquote><p>eg：Elasticsearch 的文档是不可变更的，所以执行 update 操作，实际的操作是检索-修改-重建索引的处理，这个过程发生在分片内部，可以避免多次请求的网络开销。Elasticsearch 可以部分更新，其原理是内部查询出现有的文档并进行合并生成新的文档</p><p>update 操作会将旧文档标记为已删除，增加一个新的文档。尽管不能再对旧版本的文档进行访问，但它并不会立即消失。在merge阶段会进行清理 </p></blockquote><h5 id="refresh-阶段"><a href="#refresh-阶段" class="headerlink" title="refresh 阶段"></a>refresh 阶段</h5><p>默认每隔1s 将内存缓存区（memory buffer）的文档刷新到文件系统缓存（filesystem cache） 新的段（segment） 中，清空内存缓存区。倒排索引在这个阶段生成的，经过这个阶段文档可以被搜索到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 在生产环境中，要建立一个大的新索引时，可以先关闭自动刷新，</span><br><span class="line"># 待开始使用该索引时，再把它们调回来</span><br><span class="line">PUT /my_logs/_settings</span><br><span class="line">&#123; &quot;refresh_interval&quot;: -1 &#125; </span><br><span class="line"></span><br><span class="line">PUT /my_logs/_settings</span><br><span class="line">&#123; &quot;refresh_interval&quot;: &quot;1s&quot; &#125;</span><br><span class="line"></span><br><span class="line"># 大量的索引新增场景(新索引构建, 全量同步数据)，但是又不需要近实时搜索</span><br><span class="line"># 可以设置refresh_interval 降低每个索引的刷新频率来提高搜索性能</span><br><span class="line">PUT /my_logs</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;refresh_interval&quot;: &quot;30s&quot; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="merge-阶段"><a href="#merge-阶段" class="headerlink" title="merge 阶段"></a>merge 阶段</h5><p>由于refresh阶段每秒会创建一个新的段 ，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。 每一个段都会消耗文件句柄、内存和cpu运行周期。更重要的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢</p><p>Elasticsearch通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p><p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中</p><blockquote><p>index.merge.policy.max_merge_at_once：合并时一次允许的最大段数量，默认 10</p><p>index.merge.policy.max_merged_segment：合并的段的总大小不能超过这个值，默认 5G</p><p>index.merge.policy.floor_segment：小于这个大小的segment，优先被归并。默认值为2m</p><p>segments_per_tier：每层允许的段数量大小，默认值是10</p><p>indices.store.throttle.max_bytes_per_sec：控制合并的速率，防止段爆炸问题，影响搜索性能。默认值是 20 MB&#x2F;s，对机械磁盘应该是个不错的设置。如果你用的是 SSD，可以考虑提高到 100–200 MB&#x2F;s。批量导入完全不在意搜索的情况下，可以彻底关掉合并限流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;transient&quot; : &#123;</span><br><span class="line">        &quot;indices.store.throttle.type&quot; : &quot;none&quot; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.merge.scheduler.max_thread_count：默认线程数 <code>Math.min(3, Runtime.getRuntime().availableProcessors() / 2)</code>，机械磁盘在并发 I&#x2F;O 支持方面比较差，所以需要降低每个索引并发访问磁盘的线程数</p></blockquote><h5 id="flush-阶段"><a href="#flush-阶段" class="headerlink" title="flush 阶段"></a>flush 阶段</h5><p>触发时机</p><blockquote><p>index.translog.flush_threshold_period：无论 translog 大小如何，在触发刷新之前等待多长时间。默认为<code>30m</code>.</p><p>index.translog.flush_threshold_size： translog 达到这个大小，就会发生触发 flush 操作。默认为<code>512mb</code>.</p></blockquote><p>执行操作</p><p>    创建新的translog</p><p>    所有在内存缓存区的文档都被写入一个新的段（segment）</p><p>    清空内存缓冲区</p><p>    写入提交点（commit point）到磁盘</p><p>    调用 fsync 将文件系统缓存（filesystem cache）刷到磁盘 （segment 落盘）</p><p>    删除旧的translog</p><p>translog 也被用来提供实时 CRUD 。通过ID查询、更新、删除一个文档，它会在尝试从相应的段中检索之前， 首先检查 translog 任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本</p><h4 id="查询数据流程"><a href="#查询数据流程" class="headerlink" title="查询数据流程"></a>查询数据流程</h4><p>    选择集群中的一个节点发送写入请求，接收到请求节点被称为协调节点 (coordinating node)</p><h5 id="query-阶段"><a href="#query-阶段" class="headerlink" title="query 阶段"></a>query 阶段</h5><p>    查询会广播到索引中每一个分片上（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的优先队列</p><p>     优先队列仅仅是一个存有 top-n 匹配文档的有序列表。优先队列的大小取决于分页参数 from 和 size</p><blockquote><p>具体执行如下：</p><p>    1、协调节点接受到请求，在本地创建一个大小为 <code>from + size</code> 的空优先队列</p><p>    2、协调节点将查询转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为 <code>from + size</code> 的本地有序优先队列中</p><p>    3、每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列</p></blockquote><h5 id="fetch-阶段"><a href="#fetch-阶段" class="headerlink" title="fetch 阶段"></a>fetch 阶段</h5><p>    协调节点确认哪些文档需要取回，例如，如果我们的查询指定了 <code>&#123; &quot;from&quot;: 90, &quot;size&quot;: 10 &#125;</code> ，最初的90个结果会被丢弃，只有从第91个开始的10个结果需要被取回</p><p>    协调节点给持有相关文档的每个分片创建一个 <a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distrib-multi-doc.html"  title="多文档模式">multi-get request<i class="fas fa-external-link-alt"></i></a> ，并发送请求给同样处理查询阶段的分片副本</p><p>    一旦协调节点接收到所有的结果文档，就会组装这些结果为单个响应返回给客户端</p><h5 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h5><p>    如果业务可以根据路由查询，那么可以设置routing 进行优化，避免索引的所有分片参与搜索</p><p>     bouncing results 问题，每次用户刷新页面，搜索结果表现是不同的顺序，查询中设置preference 参数，让同一个用户始终用同一个分片</p><p>    使用source参数，返回需要的字段值</p><p>    如果有深度分页的场景，使用scroll或者search_after进行设计 </p><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><h5 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h5><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_query_phase.html" >查询阶段 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_fetch_phase.html" >取回阶段 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_search_options.html" >搜索选项 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html" >游标查询 Scroll | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><h5 id="写入相关"><a href="#写入相关" class="headerlink" title="写入相关"></a>写入相关</h5><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/routing-value.html" >路由一个文档到一个分片中 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/dynamic-indices.html" >动态更新索引 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/near-real-time.html" >近实时搜索 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/translog.html" >持久化变更 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/merge-process.html" >段合并 | Elasticsearch: 权威指南 | Elastic<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> 分布式搜索框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud容错降级、异常通信</title>
      <link href="/2023/05/21/SpringCloud%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/21/SpringCloud%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="容错降级"><a href="#容错降级" class="headerlink" title="容错降级"></a>容错降级</h4><p>    在@FeignClient注解上，有两个属性fallback和fallbackFactory，两者的区别就是fallbackFactory可以拿到异常，允许业务实现根据不同的异常走不同容错降级。</p><h5 id="fallbackFactory-使用"><a href="#fallbackFactory-使用" class="headerlink" title="fallbackFactory 使用"></a>fallbackFactory 使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* name: 服务提供者</span></span><br><span class="line"><span class="comment">* contentId: 当有多个服务提供者的契约接口卡重复时, 指定bean name 防止报错</span></span><br><span class="line"><span class="comment">* fallbackFactory : 容错降级工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;$&#123;spring.application.name&#125;&quot;, contextId = &quot;helloworldService&quot;, fallbackFactory = HelloWorldFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/world/say&quot;)</span></span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 容错降级工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;HelloWorldService&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建容错降级类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cause 异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HelloWorldService <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;An exception occurred when calling the HelloWorldService&quot;</span>, cause);</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">return</span> <span class="string">&quot;failed to speak&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="fallback-使用"><a href="#fallback-使用" class="headerlink" title="fallback 使用"></a>fallback 使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* name: 服务提供者</span></span><br><span class="line"><span class="comment">* contentId: 当有多个服务提供者的契约接口卡重复时, 指定bean name 防止报错</span></span><br><span class="line"><span class="comment">* fallback : 容错降级</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;$&#123;spring.application.name&#125;&quot;, contextId = &quot;helloworldService&quot;, fallback = HelloWorldFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/world/say&quot;)</span></span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 容错降级类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldFallback</span> <span class="keyword">implements</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;An exception occurred when calling the HelloWorldService&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">return</span> <span class="string">&quot;failed to speak&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常通信"><a href="#异常通信" class="headerlink" title="异常通信"></a>异常通信</h4><p>    成功的请求一定能拿到结果，失败的请求通过异常告知。 Consumer 使用服务接口，可以缺省认为是成功的，因为失败的请求会由异常通信组件去处理。Provider 提供服务接口，如发生参数验证、数据验证不通过或者未知错误，都进行异常告知即可。</p><p>    发生问题进行排查时，异常能起到很大的作用，可直接定位到关键代码，然后带入数据进行反推。</p><p>    业务开发时更多关注其实现，不用刻意的进行异常处理。</p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><p>Provider 在执行业务抛出异常，由异常拦截器进行拦截处理返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(101)</span> </span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeExceptionInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(CodeExceptionInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessCodeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> CodedMessage&lt;Void&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request, BusinessCodeException exception)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">feignRequest</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;feign-request&quot;</span>);</span><br><span class="line">        <span class="comment">// 非feign请求</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(feignRequest) || !feignRequest.equals(<span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">&quot;An exception occurred while processing the request for &#123;&#125;&quot;</span>, uri, exception);</span><br><span class="line">            <span class="keyword">return</span> Result.failure(exception.getCode(), exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteClient</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;remote-client&quot;</span>);</span><br><span class="line">        LOGGER.error(<span class="string">&quot;An exception occurred when &#123;&#125; [Client] called &#123;&#125;&quot;</span>, remoteClient, uri, exception);</span><br><span class="line">        <span class="keyword">return</span> Result.failure(exception.getCode(), exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consumer 实现 Feign 的错误解析接口，进行响应错误解析并抛出远端调用异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignErrorInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ErrorDecoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Exception <span class="title function_">decode</span><span class="params">(String s, Response response)</span> &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bodyStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = response.body().asReader(StandardCharsets.UTF_8);</span><br><span class="line">            bodyStr = CharStreams.toString(reader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(BusinessCodes.SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">CodedMessage</span> <span class="variable">codedMessage</span> <span class="operator">=</span> JSON.parseObject(bodyStr, CodedMessage.class);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(codedMessage.getCode(), codedMessage.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截远端调用异常，记录错误日志并响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(100)</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteExceptionInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(RemoteExceptionInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RemoteException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> CodedMessage&lt;Void&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request, RemoteException exception)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteClient</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;remote-client&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(remoteClient)) &#123;</span><br><span class="line">            source = <span class="string">&quot;source &quot;</span> + remoteClient;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOGGER.error(<span class="string">&quot;An exception occurred while processing the &#123;&#125; request. Reason: The &#123;&#125; service for &#123;&#125; is error. &#123;&#125;&quot;</span>,</span><br><span class="line">                uri, exception.getRemoteAddress(), exception.getServerApplicationName(), source, exception);</span><br><span class="line">        <span class="keyword">return</span> Result.failure(exception.getCode(), exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码示例中，可以看到有从request-header中获取信息，而这些信息是基于RequestInterceptor 写入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignInnerRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        requestTemplate.header(<span class="string">&quot;feign-request&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        requestTemplate.header(<span class="string">&quot;remote-client&quot;</span>, applicationName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> RPC </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud入门使用</title>
      <link href="/2023/05/20/SpringCloud%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/20/SpringCloud%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>    [RPC 是  Remote Procedure Call (远程过程调用) 的缩写，实现的框架隐藏了远程调用的过程，使得远程调用就像是调用本地方法一样，在分布式开发环境下更多的关注业务实现](<a class="link"   href="https://en.wikipedia.org/wiki/Remote_procedure_call" >Remote procedure call - Wikipedia<i class="fas fa-external-link-alt"></i></a>)。那么实现RPC的框架要具备哪些基础能力:  服务发现&#x2F;注册、网络通信、契约接口、负载均衡。高级能力:  流控、系统保护、故障切换、治理平台</p><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><p>    Spring Cloud 是 Spring 开源提供的，早期版本底层全部由Netflix开源的框架组成，后来由于Netflix不在更新，Spring 对一些组件框架进行了替换。</p><p>    网关 Zuul、Gateway</p><p>    注册中心 Eureka、Consul</p><p>    负载均衡 Ribbon、LoadBalancer</p><p>    通信 Feign</p><p>    服务治理 Hystrix    </p><h4 id="Eureka-注册中心"><a href="#Eureka-注册中心" class="headerlink" title="Eureka 注册中心"></a>Eureka 注册中心</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span> <span class="comment"># 是否加入集群</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span> <span class="comment"># 是否从集群中获取注册表</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(EurekaServerApplication.class).web(<span class="literal">true</span>).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以Consul注册中心的话，请看 [Consul 官方](<a class="link"   href="https://docs.spring.io/spring-cloud-consul/docs/2.2.7.RELEASE/reference/html/#spring-cloud-consul-install" >Spring Cloud Consul<i class="fas fa-external-link-alt"></i></a>)</p><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><h5 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">demo-provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 实例id, host:demo-provider:8080</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;&#125;</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 主机名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h5 id="启动项目-1"><a href="#启动项目-1" class="headerlink" title="启动项目"></a>启动项目</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(DemoProviderApplication.class).web(<span class="literal">true</span>).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务实现"><a href="#服务实现" class="headerlink" title="服务实现"></a>服务实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>    导入依赖、配置文件和Provider是一致的，唯独需要变更下 spring.application.name、server.port</p><h5 id="启动项目-2"><a href="#启动项目-2" class="headerlink" title="启动项目"></a>启动项目</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(DemoConsumerApplication.class).web(<span class="literal">true</span>).run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="契约接口"><a href="#契约接口" class="headerlink" title="契约接口"></a>契约接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* name: 服务提供者</span></span><br><span class="line"><span class="comment">* contentId: 当有多个服务提供者的契约接口卡重复时, 指定bean name 防止报错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;$&#123;spring.application.name&#125;&quot;, contextId = &quot;helloworldService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorldService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/world/say&quot;)</span></span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/say&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaySomethingController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 如果这个服务有多处使用, 要建立防腐层减少以后升级带来的变动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloWorldService helloWorldService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helloWorldService.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> RPC </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
